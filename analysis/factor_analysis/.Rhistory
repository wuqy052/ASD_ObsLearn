geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Imitation")), annotations="**",
map_signif_level=TRUE,y_position = 80,extend_line=-0.22,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Emulation", "Imitation")), annotations="***",
map_signif_level=TRUE,y_position = 80,extend_line=-0.22)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Arbitration", "Imitation")), annotations="**",
map_signif_level=TRUE,y_position = 95)+
labs(title="Discovery Sample",x=" ", y = "Age") +
ylim(10,100) +
scale_fill_manual(values=c("#F9DB60", "#9CD08F", "#DBBADD","#A8E0FF"))+
scale_x_discrete(
breaks=c('Baseline','Imitation','Emulation','Arbitration'),
labels=c("Non-learning", "Imitation","Emulation","Arbitration"))+
theme_minimal() +
theme(legend.position = "none",plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_Ageclust_ori
p_Ageclust_ori <- ggplot() +
geom_violin(data=data_ori,  aes(x=cluster_group, y=Age_convert, fill = cluster_group)) +
geom_point(data=errbar_lims, aes(x=cluster_group, y=mean), size=1) +
geom_errorbar(aes(x=errbar_lims$cluster_group, ymax=errbar_lims$upper,
ymin=errbar_lims$lower), stat='identity', width=.1) +
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Emulation")), annotations="*",
map_signif_level=TRUE,y_position = 87,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Imitation")), annotations="**",
map_signif_level=TRUE,y_position = 80,extend_line=-0.22,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Emulation", "Imitation")), annotations="***",
map_signif_level=TRUE,y_position = 80,extend_line=-0.22,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Arbitration", "Imitation")), annotations="**",
map_signif_level=TRUE,y_position = 95,vjust=0.5)+
labs(title="Discovery Sample",x=" ", y = "Age") +
ylim(10,100) +
scale_fill_manual(values=c("#F9DB60", "#9CD08F", "#DBBADD","#A8E0FF"))+
scale_x_discrete(
breaks=c('Baseline','Imitation','Emulation','Arbitration'),
labels=c("Non-learning", "Imitation","Emulation","Arbitration"))+
theme_minimal() +
theme(legend.position = "none",plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_Ageclust_ori
p_Ageclust_ori <- ggplot() +
geom_violin(data=data_ori,  aes(x=cluster_group, y=Age_convert, fill = cluster_group)) +
geom_point(data=errbar_lims, aes(x=cluster_group, y=mean), size=1) +
geom_errorbar(aes(x=errbar_lims$cluster_group, ymax=errbar_lims$upper,
ymin=errbar_lims$lower), stat='identity', width=.1) +
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Emulation")), annotations="*",
map_signif_level=TRUE,y_position = 85,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Imitation")), annotations="**",
map_signif_level=TRUE,y_position = 80,extend_line=-0.22,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Emulation", "Imitation")), annotations="***",
map_signif_level=TRUE,y_position = 80,extend_line=-0.22,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Arbitration", "Imitation")), annotations="**",
map_signif_level=TRUE,y_position = 90,vjust=0.5)+
labs(title="Discovery Sample",x=" ", y = "Age") +
ylim(10,100) +
scale_fill_manual(values=c("#F9DB60", "#9CD08F", "#DBBADD","#A8E0FF"))+
scale_x_discrete(
breaks=c('Baseline','Imitation','Emulation','Arbitration'),
labels=c("Non-learning", "Imitation","Emulation","Arbitration"))+
theme_minimal() +
theme(legend.position = "none",plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_Ageclust_ori
p_Ageclust_ori <- ggplot() +
geom_violin(data=data_ori,  aes(x=cluster_group, y=Age_convert, fill = cluster_group)) +
geom_point(data=errbar_lims, aes(x=cluster_group, y=mean), size=1) +
geom_errorbar(aes(x=errbar_lims$cluster_group, ymax=errbar_lims$upper,
ymin=errbar_lims$lower), stat='identity', width=.1) +
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Emulation")), annotations="*",
map_signif_level=TRUE,y_position = 85,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Imitation")), annotations="**",
map_signif_level=TRUE,y_position = 80,extend_line=-0.22,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Emulation", "Imitation")), annotations="***",
map_signif_level=TRUE,y_position = 80,extend_line=-0.22,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Arbitration", "Imitation")), annotations="**",
map_signif_level=TRUE,y_position = 92,vjust=0.5)+
labs(title="Discovery Sample",x=" ", y = "Age") +
ylim(10,100) +
scale_fill_manual(values=c("#F9DB60", "#9CD08F", "#DBBADD","#A8E0FF"))+
scale_x_discrete(
breaks=c('Baseline','Imitation','Emulation','Arbitration'),
labels=c("Non-learning", "Imitation","Emulation","Arbitration"))+
theme_minimal() +
theme(legend.position = "none",plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_Ageclust_ori
errbar_lims <- group_by(data_rep, cluster_group) %>%
summarize(mean=mean(Age,na.rm=TRUE), sd=sd(Age,na.rm=TRUE),
upper=mean+sd, lower=mean-sd)
p_Ageclust_rep <- ggplot() +
geom_violin(data=data_rep,  aes(x=cluster_group, y=Age, fill = cluster_group)) +
geom_point(data=errbar_lims, aes(x=cluster_group, y=mean), size=1) +
geom_errorbar(aes(x=errbar_lims$cluster_group, ymax=errbar_lims$upper,
ymin=errbar_lims$lower), stat='identity', width=.1) +
labs(title="Replication Sample",x=" ", y = "Age") +
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Emulation", "Imitation")), annotations="*",
map_signif_level=TRUE,y_position = 70)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Imitation")), annotations="*",
map_signif_level=TRUE,y_position = 75)+
ylim(10,80) +
scale_fill_manual(values=c("#F9DB60", "#9CD08F", "#DBBADD","#A8E0FF"))+
scale_x_discrete(
breaks=c('Baseline','Imitation','Emulation','Arbitration'),
labels=c("Non-learning", "Imitation","Emulation","Arbitration"))+
theme_minimal() +
theme(legend.position = "none",plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_Ageclust_rep
data_rep <- read_csv("/Users/wuqy0214/Library/CloudStorage/Box-Box/OL_shared/analysis/regression/AllVars_replication.csv")
# Fig S3A, violin plot comparing Task accuracy across OL subgroups
data_rep$cluster_group <- factor(data_rep$cluster_group , levels=c("Baseline", "Imitation", "Emulation", "Arbitration"))
errbar_lims <- group_by(data_rep, cluster_group) %>%
summarize(mean=mean(Age,na.rm=TRUE), sd=sd(Age,na.rm=TRUE),
upper=mean+sd, lower=mean-sd)
p_Ageclust_rep <- ggplot() +
geom_violin(data=data_rep,  aes(x=cluster_group, y=Age, fill = cluster_group)) +
geom_point(data=errbar_lims, aes(x=cluster_group, y=mean), size=1) +
geom_errorbar(aes(x=errbar_lims$cluster_group, ymax=errbar_lims$upper,
ymin=errbar_lims$lower), stat='identity', width=.1) +
labs(title="Replication Sample",x=" ", y = "Age") +
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Emulation", "Imitation")), annotations="*",
map_signif_level=TRUE,y_position = 70)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Imitation")), annotations="*",
map_signif_level=TRUE,y_position = 75)+
ylim(10,80) +
scale_fill_manual(values=c("#F9DB60", "#9CD08F", "#DBBADD","#A8E0FF"))+
scale_x_discrete(
breaks=c('Baseline','Imitation','Emulation','Arbitration'),
labels=c("Non-learning", "Imitation","Emulation","Arbitration"))+
theme_minimal() +
theme(legend.position = "none",plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_Ageclust_rep
p_Ageclust_rep <- ggplot() +
geom_violin(data=data_rep,  aes(x=cluster_group, y=Age, fill = cluster_group)) +
geom_point(data=errbar_lims, aes(x=cluster_group, y=mean), size=1) +
geom_errorbar(aes(x=errbar_lims$cluster_group, ymax=errbar_lims$upper,
ymin=errbar_lims$lower), stat='identity', width=.1) +
labs(title="Replication Sample",x=" ", y = "Age") +
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Emulation", "Imitation")), annotations="*",
map_signif_level=TRUE,y_position = 75,extend_line=-0.22,vjust=0.5)+
geom_signif(data=errbar_lims,aes(x=cluster_group, y=mean),comparisons = list(c("Baseline", "Imitation")), annotations="*",
map_signif_level=TRUE,y_position = 75,extend_line=-0.22,vjust=0.5)+
ylim(10,100) +
scale_fill_manual(values=c("#F9DB60", "#9CD08F", "#DBBADD","#A8E0FF"))+
scale_x_discrete(
breaks=c('Baseline','Imitation','Emulation','Arbitration'),
labels=c("Non-learning", "Imitation","Emulation","Arbitration"))+
theme_minimal() +
theme(legend.position = "none",plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_Ageclust_rep
sex_xtab_ori <- data.frame(group1 = rep(c("Baseline", "Imitation", "Emulation", "Arbitration"), each = 3),
group2 = rep(c("Female","Male","Non-specific"),each=4),
values = round(rnorm(40), 2))
head(sex_xtab_ori)                                    # Print head of example data
rep(c("Baseline", "Imitation", "Emulation", "Arbitration"), each = 3
)
# Fig S3D heatmap of cross-tab for gender
sex_xtab_ori <- data.frame(group1 = rep(c("Baseline", "Imitation", "Emulation", "Arbitration"), each = 3),
group2 = rep(c("Female","Male","Non-specific"),each=4),
values = round(rnorm(12), 2))
head(sex_xtab_ori)                                    # Print head of example data
sex_xtab_ori <- data.frame(group1 = rep(c("Baseline", "Imitation", "Emulation", "Arbitration"), each = 3),
group2 = rep(c("Female","Male","Non-specific"),times=4),
values = round(rnorm(12), 2))
head(sex_xtab_ori)                                    # Print head of example data
sex_xtab_ori <- data.frame(group1 = rep(c("Baseline", "Imitation", "Emulation", "Arbitration"), each = 3),
group2 = rep(c("Female","Male","Non-specific"),times=4),
values = round(c(133,123,2,46,41,0,228,220,4,93,51,1)))
head(sex_xtab_ori)                                    # Print head of example data
p_sextab_ori <- ggplot(sex_xtab_ori, aes(group1, group2)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = values))
p_sextab_ori
# Fig S3D heatmap of cross-tab for gender
sex_xtab_ori <- data.frame(group1 = rep(c("Baseline", "Imitation", "Emulation", "Arbitration"), each = 3),
group2 = rep(c("Female","Male","Non-specific"),times=4),
counts = round(c(133,123,2,46,41,0,228,220,4,93,51,1)))
p_sextab_ori <- ggplot(sex_xtab_ori, aes(group1, group2)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts))
p_sextab_ori
sex_xtab_ori <- data.frame(subgroup = rep(c("Baseline", "Imitation", "Emulation", "Arbitration"), each = 3),
gender = rep(c("Female","Male","Non-specific"),times=4),
counts = round(c(133,123,2,46,41,0,228,220,4,93,51,1)))
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts))
p_sextab_ori
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts))+
geom_text(aes(label = counts))
p_sextab_ori
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts))+
geom_text(aes(label = counts))++
scale_fill_gradient(low = "white", high = "#1b98e0")
p_sextab_ori
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts))+
geom_text(aes(label = counts))+
scale_fill_gradient(low = "white", high = "#1b98e0")
p_sextab_ori
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts))+
geom_text(aes(label = counts))+
scale_fill_gradient(low = "white", high = "#1b98e0")+
theme_minimal()
p_sextab_ori
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts))+
geom_text(aes(label = counts))+
scale_fill_gradient(low = "white", high = "#1b98e0")+
theme_minimal() +
labs(title="Discovery Sample",x=" ", y = " ") +
theme(plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_sextab_ori
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts),color="black")+
geom_text(aes(label = counts))+
scale_fill_gradient(low = "white", high = "#1b98e0")+
theme_minimal() +
labs(title="Discovery Sample",x=" ", y = " ") +
theme(plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_sextab_ori
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts),color="black")+
geom_text(aes(label = counts))+
scale_fill_gradient(low = "white", high = "#1b98e0",name="Count")+
theme_minimal() +
labs(title="Discovery Sample",x=" ", y = " ") +
theme(plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_sextab_ori
sex_xtab_ori <- data.frame(subgroup = rep(c("Non-learning", "Imitation", "Emulation", "Arbitration"), each = 3),
gender = rep(c("Female","Male","Non-specific"),times=4),
counts = round(c(133,123,2,46,41,0,228,220,4,93,51,1)))
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts),color="black")+
geom_text(aes(label = counts))+
scale_fill_gradient(low = "white", high = "#1b98e0",name="Count")+
theme_minimal() +
labs(title="Discovery Sample",x=" ", y = " ") +
theme(plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_sextab_ori
p_sextab_ori <- ggplot(sex_xtab_ori, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts),color="black")+
geom_text(aes(label = counts))+
scale_fill_gradient(low = "white", high = "#e66aac",name="Count")+
theme_minimal() +
labs(title="Discovery Sample",x=" ", y = " ") +
theme(plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_sextab_ori
sum(sex_xtab_ori$counts)
sex_xtab_rep <- data.frame(subgroup = rep(c("Non-learning", "Imitation", "Emulation", "Arbitration"), each = 2),
gender = rep(c("Female","Male"),times=4),
counts = round(c(41,52,28,23,70,59,37,41)))
p_sextab_rep <- ggplot(sex_xtab_rep, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts),color="black")+
geom_text(aes(label = counts))+
scale_fill_gradient(low = "white", high = "#e66aac",name="Count")+
theme_minimal() +
labs(title="Discovery Sample",x=" ", y = " ") +
theme(plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_sextab_ori
p_sextab_rep <- ggplot(sex_xtab_rep, aes(gender, subgroup)) +    # Create default ggplot2 heatmap
geom_tile(aes(fill = counts),color="black")+
geom_text(aes(label = counts))+
scale_fill_gradient(low = "white", high = "#e66aac",name="Count")+
theme_minimal() +
labs(title="Replication Sample",x=" ", y = " ") +
theme(plot.title = element_text(hjust = 0.5,size=20),axis.title=element_text(size=16),
axis.text = element_text(size = 14))
p_sextab_rep
p_sextab_ori
sum(sex_xtab_rep$counts)
# Matrix
m <- matrix(rnorm(100), ncol = 10)
colnames(m) <- paste("Col", 1:10)
rownames(m) <- paste("Row", 1:10)
heatmap(m, col = hcl.colors(50))
install.packages("pheatmap")
library(pheatmap)
# Data
set.seed(8)
m <- matrix(rnorm(200), 10, 10)
colnames(m) <- paste("Col", 1:10)
rownames(m) <- paste("Row", 1:10)
# Heat map
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE)
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE，
hcl.colors(50,"Green-Orange")
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE，
hcl.colors(50,"Green-Orange"))
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE，
color=hcl.colors(50,"Green-Orange"))
# Heat map
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(50,"Green-Orange"))
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(10,"Green-Orange"))
# Heat map
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(1,"Green-Orange"))
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(100,"Green-Orange"))
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(100,"Cyan-Magneta"))
# Heat map
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(100,"Cyan-Magenta"))
# Heat map
pheatmap(m,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(100,"ArmyRose"))
View(m)
# Figure S2A Model confusion matrix
param_rec_ori <- read_excel("~/Library/CloudStorage/Box-Box/OL_shared/Paper/Figure/FigureS2_ParamRecov.xlsx",
sheet = "original_confusion")
library(readxl)
# Figure S2A Model confusion matrix
param_rec_ori <- read_excel("~/Library/CloudStorage/Box-Box/OL_shared/Paper/Figure/FigureS2_ParamRecov.xlsx",
sheet = "original_confusion")
View(param_rec_ori)
param_rec_ori <- read_excel("~/Library/CloudStorage/Box-Box/OL_shared/Paper/Figure/FigureS2_ParamRecov.xlsx",
sheet = "original_confusion",colNames = TRUE)
# Figure S2A Model confusion matrix
param_rec_ori <- read_excel("~/Library/CloudStorage/Box-Box/OL_shared/Paper/Figure/FigureS2_ParamRecov.xlsx",
sheet = "original_confusion")
# Data
rownames(param_rec_ori) <- colnames(param_rec_ori)
library(pheatmap)
library(readxl)
# Figure S2A Model confusion matrix
param_rec_ori <- matrix(read_excel("~/Library/CloudStorage/Box-Box/OL_shared/Paper/Figure/FigureS2_ParamRecov.xlsx",
sheet = "original_confusion"))
View(param_rec_ori)
param_rec_ori <- as.data.frame(read_excel("~/Library/CloudStorage/Box-Box/OL_shared/Paper/Figure/FigureS2_ParamRecov.xlsx",
sheet = "original_confusion"))
# Data
rownames(param_rec_ori) <- colnames(param_rec_ori)
View(param_rec_ori)
pheatmap(param_rec_ori,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(100,"ArmyRose"))
# Heat map
pheatmap(param_rec_ori,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(100,"ArmyRose"),display_numbers=TRUE)
pheatmap(param_rec_ori,
cluster_cols = FALSE,
cluster_rows = FALSE,color=scale_fill_gradient(low = "white", high = "#e66aac",name="Count"),display_numbers=TRUE)
library(ggplot2)
pheatmap(param_rec_ori,
cluster_cols = FALSE,
cluster_rows = FALSE,color=scale_fill_gradient(low = "white", high = "#e66aac",name="Count"),display_numbers=TRUE)
# Heat map
pheatmap(param_rec_ori,
cluster_cols = FALSE,
cluster_rows = FALSE,color=hcl.colors(100,"Green-Yellow"),display_numbers=TRUE)
SRS_all <- read_csv("/Users/wuqy0214/Documents/psy/OLab/SRS/SRS score/SRS_nonreversed_updated_noNA.csv")
SRS_all$X1 <- NULL
subIDs <- SRS_all$subID
# load final subject inclusion list
inc_list <- read_csv('/Users/wuqy0214/Library/CloudStorage/Box-Box/OL_shared/data/sublist_original.csv')
SRS_final <- subset(SRS_all, SRS_all$subID %in% inc_list$ID)
subIDs_inc <- SRS_final$subID
SRS_final$subID <- NULL
SRS_final$...1 <- NULL
library(stats)
library(tidyverse)
library(psych)
library(GPArotation)
library(lavaan)
library(parameters)
# load single question data
SRS_all <- read_csv("/Users/wuqy0214/Documents/psy/OLab/SRS/SRS score/SRS_nonreversed_updated_noNA.csv")
SRS_all$X1 <- NULL
subIDs <- SRS_all$subID
# load final subject inclusion list
inc_list <- read_csv('/Users/wuqy0214/Library/CloudStorage/Box-Box/OL_shared/data/sublist_original.csv')
SRS_final <- subset(SRS_all, SRS_all$subID %in% inc_list$ID)
subIDs_inc <- SRS_final$subID
SRS_final$subID <- NULL
SRS_final$...1 <- NULL
View(SRS_final)
View(SRS_final)
write.csv(SRS_final, "/Users/wuqy0214/Documents/GitHub/ASD_ObsLearn/data/Study1/SRS_items_discovery.csv", row.names=FALSE)
SRS_final <- read_csv("~/data/Study1/SRS_items_discovery.csv")
SRS_final <- read_csv("./data/Study1/SRS_items_discovery.csv")
getwd()
setwd("~/Documents/GitHub/ASD_ObsLearn/analysis/factor_analysis")
getcd()
SRS_final <- read_csv("./,/data/Study1/SRS_items_discovery.csv")
SRS_final <- read_csv("././data/Study1/SRS_items_discovery.csv")
SRS_final <- read_csv("../../data/Study1/SRS_items_discovery.csv")
View(SRS_final)
library(stats)
library(tidyverse)
library(psych)
library(GPArotation)
library(lavaan)
library(parameters)
# load SRS item data - discovery sample
setwd("~/Documents/GitHub/ASD_ObsLearn/analysis/factor_analysis") # set your own working directory
SRS_discovery <- read_csv("../../data/Study1/SRS_items_discovery.csv")
# factor analysis
# parallel analysis
res_parallel <- fa.parallel(SRS_discovery, fm='minres', fa='fa')
print(SRS.promax, digits=3, cutoff = 0.3, sort=TRUE)
print(apply(SRS.promax$loadings^2,1,sum))
SRS.promax <- factanal(SRS_discovery, factors = 8, rotation = "promax",fm='ml')
# extract factor loadings
loading_ori_promax = data.frame(matrix(as.numeric(SRS.promax$loadings),
attributes(SRS.promax$loadings)$dim,
dimnames=attributes(SRS.promax$loadings)$dimnames))
print(SRS.promax, digits=3, cutoff = 0.3, sort=TRUE)
print(apply(SRS.promax$loadings^2,1,sum))
SRS_score_promax <- SRS.promax.scores$scores
write.csv(SRS_score_promax, "SRS_fa_score_8_factor_promax_discovery.csv", row.names=F)
SRS_score_promax <- SRS.promax.scores$scores
write.csv(SRS_score_promax, "SRS_fa_score_8_factor_promax_discovery.csv", row.names=F)
# factor scores
SRS.promax.scores <- factor.scores(SRS_final, SRS.promax, Phi = NULL, method = c("Thurstone"),rho=NULL,impute="none")
SRS_score_promax <- SRS.promax.scores$scores
write.csv(SRS_score_promax, "SRS_fa_score_8_factor_promax_discovery.csv", row.names=F)
SRS.promax.scores <- factor.scores(SRS_discovery, SRS.promax, Phi = NULL, method = c("Thurstone"),rho=NULL,impute="none")
SRS_score_promax <- SRS.promax.scores$scores
write.csv(SRS_score_promax, "SRS_fa_score_8_factor_promax_discovery.csv", row.names=F)
SRS_replicate <- read_csv("/Users/wuqy0214/Library/CloudStorage/Box-Box/OL_shared/data_replication_prolific/questionnaires/SRS_sarah_format.csv")
inc_list_rep <- read_csv('/Users/wuqy0214/Library/CloudStorage/Box-Box/OL_shared/data_replication_prolific/sublist_replication.csv')
SRS_rep_final <- subset(SRS_replicate, SRS_replicate$subID %in% inc_list_rep$ID)
subIDs_rep_inc <- SRS_rep_final$subID
SRS_rep_final$subID <- NULL
write.csv(SRS_replicate, "../../data/Study2/SRS_items_replication.csv", row.names=FALSE)
SRS_replicate <- read_csv("../../data/Study2/SRS_items_replication.csv")
View(SRS_replicate)
SRS_replicate <- read_csv("/Users/wuqy0214/Library/CloudStorage/Box-Box/OL_shared/data_replication_prolific/questionnaires/SRS_sarah_format.csv")
inc_list_rep <- read_csv('/Users/wuqy0214/Library/CloudStorage/Box-Box/OL_shared/data_replication_prolific/sublist_replication.csv')
SRS_rep_final <- subset(SRS_replicate, SRS_replicate$subID %in% inc_list_rep$ID)
subIDs_rep_inc <- SRS_rep_final$subID
SRS_rep_final$subID <- NULL
write.csv(SRS_rep_final, "../../data/Study2/SRS_items_replication.csv", row.names=FALSE)
SRS_replication <- read_csv("../../data/Study2/SRS_items_replication.csv")
View(SRS_replication)
write.csv(SRS_rep_score, "SRS_fa_score_8_factor_promax_replication.csv", row.names=F)
SRS_rep.scores <- factor.scores(SRS_replication, SRS.promax, Phi = NULL, method = c("Thurstone"),rho=NULL,impute="none")
SRS_rep_score <- SRS_replication$scores
write.csv(SRS_rep_score, "SRS_fa_score_8_factor_promax_replication.csv", row.names=F)
# apply the transformation
SRS_rep.scores <- factor.scores(SRS_replication, SRS.promax, Phi = NULL, method = c("Thurstone"),rho=NULL,impute="none")
SRS_rep_score <- SRS_rep.scores$scores
write.csv(SRS_rep_score, "SRS_fa_score_8_factor_promax_replication.csv", row.names=F)
library(stats)
library(tidyverse)
library(psych)
library(GPArotation)
library(lavaan)
library(parameters)
# load SRS item data - discovery sample
setwd("~/Documents/GitHub/ASD_ObsLearn/analysis/factor_analysis") # set your own working directory
SRS_discovery <- read_csv("../../data/Study1/SRS_items_discovery.csv")
# factor analysis
# parallel analysis
res_parallel <- fa.parallel(SRS_discovery, fm='minres', fa='fa')
# parallel analysis suggests num_factor  = 8
# promax
SRS.promax <- factanal(SRS_discovery, factors = 8, rotation = "promax",fm='ml')
# extract factor loadings
loading_ori_promax = data.frame(matrix(as.numeric(SRS.promax$loadings),
attributes(SRS.promax$loadings)$dim,
dimnames=attributes(SRS.promax$loadings)$dimnames))
print(SRS.promax, digits=3, cutoff = 0.3, sort=TRUE)
print(apply(SRS.promax$loadings^2,1,sum))
# factor scores
SRS.promax.scores <- factor.scores(SRS_discovery, SRS.promax, Phi = NULL, method = c("Thurstone"),rho=NULL,impute="none")
SRS_score_promax <- SRS.promax.scores$scores
SRS_replication <- read_csv("../../data/Study2/SRS_items_replication.csv")
# apply the transformation
SRS_rep.scores <- factor.scores(SRS_replication, SRS.promax, Phi = NULL, method = c("Thurstone"),rho=NULL,impute="none")
SRS_rep_score <- SRS_rep.scores$scores
cfa_mdl <- 'f1 =~ SRS.A_10 + SRS.A_14 + SRS.A_16 + SRS.A_19 + SRS.A_2 + SRS.A_20 + SRS.A_24 +
SRS.A_28 + SRS.A_30 + SRS.A_31 + SRS.A_39 + SRS.A_4 + SRS.A_41 + SRS.A_42 +
SRS.A_44 + SRS.A_47 + SRS.A_49 + SRS.A_5 + SRS.A_50 + SRS.A_51 +
SRS.A_52 + SRS.A_53 + SRS.A_54 + SRS.A_55 + SRS.A_56 + SRS.A_58  + SRS.A_61 +
SRS.A_62 + SRS.A_63 + SRS.A_65 + SRS.A_8 + SRS.A_9
f2 =~ SRS.A_1 + SRS.A_23 + SRS.A_27 + SRS.A_34 + SRS.A_37 + SRS.A_43 + SRS.A_57 + SRS.A_6 + SRS.A_64
f3 =~ SRS.A_15 + SRS.A_17 + SRS.A_21 + SRS.A_22 + SRS.A_26 + SRS.A_38 + SRS.A_45 + SRS.A_48 + SRS.A_7
f4 =~ SRS.A_11 + SRS.A_12 + + SRS.A_3
f5 =~ SRS.A_13 + SRS.A_18 + SRS.A_33 + SRS.A_35
f7 =~ SRS.A_25 + SRS.A_29 + SRS.A_40
f8 =~  SRS.A_46 + SRS.A_59 + SRS.A_60'
cfa_dis_on_dis = cfa(cfa_mdl,data=SRS_discovery)
fitmeasures(cfa_dis_on_dis,fit.measures="all",output = "text")
cfa_dis_on_rep = cfa(cfa_mdl,data=SRS_replication)
fitmeasures(cfa_dis_on_rep,fit.measures="all",output = "text")
